-- Table creation

create table answers(
       campaign int,
       ip text,
       port int,
       name text,
       timestamp int,
       answer_type int,
       version int,
       ciphersuite int,
       alert_level int,
       alert_type int,
       chain_hash text,
       primary key (campaign, ip, name)
);

create table chains(
       hash text,
       position int,
       cert_hash text,
       primary key (hash, position)
);

create table certs(
       hash text primary key,
       version integer,
       serial text,
       subject_hash text,
       issuer_hash text,
       not_before text,
       not_after text,
       key_type text,
       rsa_modulus text,
       rsa_exponent text,
       isCA integer,
       subject_key_identifier text,
       authority_key_identifier text,
       authotity_serial_number text
);

create table dns(
       hash text primary key,
       name text
);

create table names(
       cert_hash text,
       type text,
       name text,
       primary key (cert_hash, type, name)
);

create table unparsed_certs(
       cert_hash text,
       reason text,
       primary key (cert_hash)
);

create table links(
       subject_hash text,
       issuer_hash text,
       primary key (issuer_hash, subject_hash)
);

create table transitive_links(
       issuer_hash text,
       subject_hash text,
       distance int,
       primary key (issuer_hash, subject_hash)
);

create table built_chains(
       chain_hash text,
       built_chain_number int,
       chain_length int,
       complete int,
       ordered int,
       n_transvalid int,
       n_unused int,
       not_before text,
       not_after text,
       key_typesize text,
       primary key (chain_hash, built_chain_number)
);

create table built_links(
       chain_hash text,
       built_chain_number int,
       position_in_chain int,
       position_in_msg int,
       cert_hash text,
       primary key (chain_hash, built_chain_number, position_in_chain)
);

create table unused_certs(
       chain_hash text,
       built_chain_number int,
       position_in_msg int,
       cert_hash text,
       primary key (chain_hash, built_chain_number, position_in_msg)
);


create table trusted_certs(
       cert_hash text,
       trust_flag text,
       primary key (cert_hash, trust_flag)
);

create table trusted_chains(
       chain_hash text,
       built_chain_number int,
       trust_flag text,
       primary key (chain_hash, built_chain_number, trust_flag)
);


create table rated_chains(
       chain_hash text,
       built_chain_number int,
       trust_flag text,
       grade text,
       primary key (chain_hash, built_chain_number, trust_flag)
);


-- Import

.mode list
.separator :
.import answers.csv answers
.import chains.csv chains
.import certs.csv certs
.import dns.csv dns
.import names.csv names
.import links.csv links
.import built_chains.csv built_chains
.import built_links.csv built_links
.import unused_certs.csv unused_certs
.import trusted_certs.csv trusted_certs
.import trusted_chains.csv trusted_chains
.import rated_chains.csv rated_chains


-- Indexes

create index answers_ip_idx on answers (campaign, ip);
--create index answers_name_idx on answers (campaign, name);
create index answers_chain_idx on answers (chain_hash);

create index chains_hash_idx on chains (hash);
create index chains_cert_idx on chains (cert_hash);

create index certs_hash_idx on certs (hash);
create index certs_subject_idx on certs (subject_hash);
create index certs_issuer_idx on certs (issuer_hash);

create index dns_hash_idx on dns (hash);
create index dns_name_idx on dns (name);

create index unparsed_certs_idx on unparsed_certs (cert_hash);

create index names_cert_idx on names (cert_hash);
create index names_name_idx on names (type, name);

create index links_issuer_idx on links (issuer_hash);
create index links_subject_idx on links (subject_hash);

--create index transitive_links_idx

create index built_chains_n_idx on built_chains (chain_hash, built_chain_number);

create index built_links_n_idx on built_links (chain_hash, built_chain_number);
create index built_links_cert_idx on built_links (cert_hash);
create index built_links_posinmsg_idx on built_links (position_in_msg);

create index unused_certs_n_idx on unused_certs (chain_hash, built_chain_number);
create index unused_certs_cert_idx on unused_certs (cert_hash);

--create index trusted_certs_idx

--create index trusted_chains_idx

--create index rated_chains_idx


-- Transitive links computation (should not be done on a big campaign)

insert into transitive_links
  select issuer_hash, subject_hash, 0 from links
  where issuer_hash = subject_hash;

insert into transitive_links
  select issuer_hash, subject_hash, 1 from links
  where issuer_hash != subject_hash;


insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

select count(*) from transitive_links;

insert or ignore into transitive_links
  select tl1.issuer_hash, tl2.subject_hash, tl1.distance + tl2.distance
  from transitive_links tl1, transitive_links tl2
  where tl1.subject_hash = tl2.issuer_hash;

select count(*) from transitive_links;

