= v1.0 milestone =
 - Ensure concerto builds against the master branch on GitHub of parsifal
 - Write a micro-tutorial?
 - Rewrite maestro to be more modular (Makefile? different options?)
 - Add support for campaign ids / stimuli in maestro.

 - Add UUIDv5 (sha1 + namespace) to replace hashes (including as key for binary storage)
 - Improve CSV format (do not quote integer, hash or empty field!)
 - Add support to probe a server easily
 - Explicit implicit assumptions (buildChains relies on chains to be contiguous!)
 - Add support for table versionning (schemas should be put in DATA_DIR)
 - Add support for fileOps backend versionning (for the moment, we use csv+packs but there should be other backends)

 - Write scripts to automate NSS store retrieval
 - Improve -v on every program (to understand better some problems, some sizes)
 - All these options should be factored and pushed into fileOps?
 - Improve arg handling in general

 - Bug: Why does injectAnswers open all files?
 - Bug? Handle "FAILURE: TODO" and "FAILURE: SSLv3 PRF" in injectAD
 - Bug: in stats, lines where kind is neither O, A, S or W. There are a lot with 101




= Next steps =
 - Include keys, fields, etc. in a table description to generate schemas and help re-open a file with the correct constraints
 - Optimize flagTrust (it is long and uses a lot of memory!
$ time ~/dev/research/concerto/flagTrust -t ev --der -d all-campaigns--max-transvalid-3/ 2014-03-mozilla-ev-certs/*
real    29m53.423s
user    22m10.792s
sys     0m21.964s
yeye@fry:/mnt/ssl-data-new/analysis/2015-05$ time ~/dev/research/concerto/flagTrust -t trusted --der -d all-campaigns--max-transvalid-3/ 2014-03-mozilla-trusted-certs/*
real    83m12.053s
user    24m18.924s
sys     0m39.128s

 - use reload_keys in each program (for now it is only used for injectAD/chains.csv)
 - test it!
 - add --skip-reloading-keys-for <string> => string list (use with caution)

 - Improve behavior stats?

 - Add relevant indices for trusted_certs/trusted_chains/rated_chains
 - Rethink the data structures (Hashtbl should not have large lists, and we should use sets instead of Hashtbl when possible) + use a binary representation in OCaml for hashes (abstract type Hash.t)

 - Add a tool to probe server with a given client_hello
 - Add a tool to retrieve CRLs
 - Rewrite piccolo (js, limit some stuff when it's too long)
   * essentially add a path for each table
   * add support for partial info (no answer_dump, no stimulus, ...)
   * add search fields
   * add random samples
 - Write a clean merge to help parallel executions
   * iter_lines on all CSV to add to the new
   * possibility on the command line to indicate which file should be checked for dupes (complete line or some "key" fields), e.g. chains?
   * iter on filetypes to cp.
 - Add options for parseCerts (-out-prefix) and for merge (-in-prefix) to allow parallel tools on the same directory
 - Find a way to handle transitive_links
 - Try it on a whole campaign and see what needs improvements!


= Various TODO in concerto-ng =
 - Add an index to raw (see below)
 - Add some features to fileOps (see TODO inside)
 - Optimize storage (internally use binary hashes, binary representation instead of csv?, SQL types and indexes?) => provide a fileOps interface and several implementations (csv, bin-csv, compressed, others)



= Add an index to raw/ =

The idea would be that opening raw, the code would open raw/certs.index with namelen/name/offset/len for each cert and update it at the end.

When loading the first raw/certs/?
 - look for raw/certs.index
   => if it exists, load the data
   => if it does not, rebuild the index with rebuild_index (which is essentially what we do now)
 - do as before

When adding a file raw/certs/? that does not exist
 - remove raw/certs.index.bak if it existed
 - rename raw/certs.index raw/certs.index.bak
 - mark certs as dirty
 - do as before

When closing all
 - for each dirty filetype
 - rewrite the index
 - remove raw/certs.index.bak


This would allow for
 - better perfs
 - a clear update path
 - a way to list all certs easily






Campaigns
 - Proper support for multiple A records when resolving names
 - Add tools to probe a list (adapt probe_server)
 - Add tools to extract IPs and names from a database, possibly subject to some conditions (campaign id)
 - Add checks to verify the conformity of an answer to the emitted client_hello

AnswerDump -> CSV
 - Handle warning-level "Unrecognized name" alerts preceding valid handshake messages

scans.io -> CSV
 - Add support for files from scans.io (_hosts + _certs)

DB injection
 - Allow for DB reuse (with different campaign ids)
 - New tool to check DB internal consistency (n_transvalid is duplicated for example)
 - Allow for different back-ends (sqlite, pgsql)

Analysis -> DB injection
 - Add support for revocation
 - Add support for arbitrary trust anchors (at rendering level)
 - Add support for name constraints (and the possibility to add them in the db)

Website
 - Provide French templates (using cookies to retain the language?)
 - Add graphs using dot?
 - Add support to filter by campaign
 - Add support to only show certain parts of the HTML and/or limit the depth of the queries
 - Use Bootstrap to render the results properly

Maestro
 - Provide a finer-grain timing of db operations

General
 - Write unit tests to check backend
 - Write unit tests for each program
